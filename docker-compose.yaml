services:
  userservice:
    build:
      context: ./UserService
      dockerfile: Dockerfile
    ports:
      - "7207:8080"
    env_file:
      - ./UserService/UserService/.env
    depends_on:
      - postgres-user

  productservice:
    build:
      context: ./ProductService
      dockerfile: Dockerfile
    ports:
      - "50051:50051"
    env_file:
      - ./ProductService/.env
    depends_on:
      rabbitmq:
        condition: service_healthy
      mongodb:
        condition: service_started
  
  searchservice:
    build:
      context: ./SearchService 
      dockerfile: Dockerfile
    ports:
      - "5000:8000"
    env_file:
      - ./SearchService/.env
    depends_on:
      rabbitmq:
        condition: service_healthy

  auditservice:
    build:
      context: ./AuditService
      dockerfile: Dockerfile
    ports:
      - "8088:8080"
    env_file:
      - ./AuditService/.env
    depends_on:
      - kafka
      - mongodb

  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 10s
      timeout: 10s
      retries: 5
      
  rabbitmq:
    image: "rabbitmq:4-management"
    ports:
      - "5672:5672"  
      - "15672:15672" 
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 15s
      retries: 3
    environment:
      RABBITMQ_DEFAULT_USER: user  
      RABBITMQ_DEFAULT_PASS: password  
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq

  # Gateways
  kong-db:
    image: postgres:13
    environment:
      POSTGRES_USER: kong
      POSTGRES_DB: kong
      POSTGRES_PASSWORD: kong
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "kong"]
      interval: 30s
      timeout: 30s
      retries: 3
    ports:
      - "5432:5432"
    volumes:
      - kong_data:/var/lib/postgresql/data

  kong-migrations:
    image: kong:3.6
    command: kong migrations bootstrap
    depends_on:
      - kong-db
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-db
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kong
    restart: on-failure

  kong:
    image: kong:3.6
    depends_on:
      - kong-migrations
      - userservice
      - productservice
      - searchservice
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-db
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kong
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_PROXY_LISTEN: 0.0.0.0:8000, 0.0.0.0:8443 http2 ssl
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
      KONG_ADMIN_GUI_URL: http://localhost:8002
    ports:
      - "8000:8000"
      - "8001:8001" 
      - "8002:8002"
      - "8443:8443"
    healthcheck:
      test: [ "CMD", "kong", "health" ]
      interval: 10s
      timeout: 10s
      retries: 10
    restart: on-failure

  tyk-redis:
    image: redis:4.0-alpine
    container_name: tyk-redis
    ports:
      - "6379:6379"

  tyk-gateway:
    image: tykio/tyk-gateway:latest
    container_name: tyk-gateway
    ports:
      - "9000:8080" 
    depends_on:
      - tyk-redis
      - userservice
      - productservice
      - searchservice
    volumes:
      - ./tyk/tyk.conf:/opt/tyk-gateway/tyk.conf
      - ./tyk/apps:/opt/tyk-gateway/apps
    restart: on-failure

  # Databases 
  mongodb:
    image: mongo
    restart: always
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: password

  postgres-user:
    image: postgres
    restart: always
    environment:
      POSTGRES_USER: david
      POSTGRES_PASSWORD: david
      POSTGRES_DB: User
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5433:5432"

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    env_file:
      - ./frontend/.env
    ports:
      - "3000:80"

  # Micro Frontends
  # Uncomment the following sections to enable micro frontends
  # mfe-user:
  #   build:
  #     context: ./micro-frontends/mfe-user
  #     dockerfile: Dockerfile
  #   ports:
  #     - "3003:80"
  #   env_file:
  #     - ./micro-frontends/mfe-user/.env

  # mfe-search:
  #   build:
  #     context: ./micro-frontends/mfe-search
  #     dockerfile: Dockerfile
  #   ports:
  #     - "3002:80"
  #   env_file:
  #     - ./micro-frontends/mfe-search/.env

  # shell:
  #   build:
  #     context: ./micro-frontends/shell
  #     dockerfile: Dockerfile
  #   ports:
  #     - "3000:80"
  #   env_file:
  #     - ./micro-frontends/shell/.env

volumes:
  rabbitmq_data:
    driver: local
  kong_data:
    driver: local
  mongo_data:
    driver: local
  postgres_data:
    driver: local